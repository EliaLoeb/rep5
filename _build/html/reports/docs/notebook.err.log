Traceback (most recent call last):
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\Gebruiker\miniconda3\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
# Stap 1: Laad de datasets 

df1 = pd.read_csv("data.csv") # Rajeevw (prestaties en fysieke data) 

df2 = pd.read_csv("ufc-master.csv") # Mdabbert (aanvullende info) 

 

# Stap 2: Harmoniseer kolomnamen in df2 

df2 = df2.rename(columns={ 

'RedFighter': 'R_fighter', 

'BlueFighter': 'B_fighter' 

}) 

 

# Stap 3: Merge datasets op vechtersnamen (datum wordt genegeerd) 

df_merged = pd.merge(df1, df2, on=['R_fighter', 'B_fighter'], how='inner') 

 

# Stap 4: Selecteer relevante kolommen 

relevant_columns = [ 

'R_age', 'B_age', 

'R_Height_cms', 'B_Height_cms', 

'R_Reach_cms', 'B_Reach_cms', 

'R_avg_SIG_STR_pct', 'B_avg_SIG_STR_pct', 

'R_avg_TD_pct', 'B_avg_TD_pct', 

'R_avg_SUB_ATT', 'B_avg_SUB_ATT', 

'weight_class', 

'Winner_x' 

] 

df_clean = df_merged[relevant_columns].copy() 

 

# Stap 5: Verwijder onbekende waarden 

df_clean = df_clean.replace(['Unknown', 'Unclear', 'unk', 'UNK', '?'], pd.NA) 

 

# Stap 6: Verwijder rijen met ontbrekende waarden 

df_clean = df_clean.dropna() 

 

# Stap 7: Verwijder catchweight- Ã©n vrouwelijke gewichtsklassen 

df_clean = df_clean[~df_clean['weight_class'].str.contains('Catch|Women', case=False, na=False)] 

 

# Stap 8: Hernoem 'Winner_x' naar 'Winner' 

df_clean = df_clean.rename(columns={'Winner_x': 'Winner'}) 

 

# Stap 9: Voeg verschilvariabelen toe 

df_clean['age_diff'] = df_clean['R_age'] - df_clean['B_age'] 

df_clean['height_diff'] = df_clean['R_Height_cms'] - df_clean['B_Height_cms'] 

df_clean['reach_diff'] = df_clean['R_Reach_cms'] - df_clean['B_Reach_cms'] 

df_clean['strike_acc_diff'] = df_clean['R_avg_SIG_STR_pct'] - df_clean['B_avg_SIG_STR_pct'] 

df_clean['td_acc_diff'] = df_clean['R_avg_TD_pct'] - df_clean['B_avg_TD_pct'] 

df_clean['sub_att_diff'] = df_clean['R_avg_SUB_ATT'] - df_clean['B_avg_SUB_ATT'] 

 

# Stap 10: Opslaan als nieuwe CSV 

df_clean.to_csv("ufc_clean.csv", index=False) 

 

# Stap 11: Eerste 5 rijen laten zien 

print(df_clean.head(5)) 
------------------


[31m---------------------------------------------------------------[39m
[31mKeyError[39m                      Traceback (most recent call last)
[32m~\AppData\Local\Temp\ipykernel_25392\1003291079.py[39m in [36m?[39m[34m()[39m
[32m     20[39m 
[32m     21[39m 
[32m     22[39m [38;5;66;03m# Stap 3: Merge datasets op vechtersnamen (datum wordt genegeerd)[39;00m
[32m     23[39m 
[32m---> [39m[32m24[39m df_merged = pd.merge(df1, df2, on=[[33m'R_fighter'[39m, [33m'B_fighter'[39m], how=[33m'inner'[39m)
[32m     25[39m 
[32m     26[39m 
[32m     27[39m 

[32m~\miniconda3\Lib\site-packages\pandas\core\reshape\merge.py[39m in [36m?[39m[34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)[39m
[32m    166[39m             validate=validate,
[32m    167[39m             copy=copy,
[32m    168[39m         )
[32m    169[39m     [38;5;28;01melse[39;00m:
[32m--> [39m[32m170[39m         op = _MergeOperation(
[32m    171[39m             left_df,
[32m    172[39m             right_df,
[32m    173[39m             how=how,

[32m~\miniconda3\Lib\site-packages\pandas\core\reshape\merge.py[39m in [36m?[39m[34m(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)[39m
[32m    790[39m             self.right_join_keys,
[32m    791[39m             self.join_names,
[32m    792[39m             left_drop,
[32m    793[39m             right_drop,
[32m--> [39m[32m794[39m         ) = self._get_merge_keys()
[32m    795[39m 
[32m    796[39m         [38;5;28;01mif[39;00m left_drop:
[32m    797[39m             self.left = self.left._drop_labels_or_levels(left_drop)

[32m~\miniconda3\Lib\site-packages\pandas\core\reshape\merge.py[39m in [36m?[39m[34m(self)[39m
[32m   1293[39m                         [38;5;66;03m# Then we're either Hashable or a wrong-length arraylike,[39;00m
[32m   1294[39m                         [38;5;66;03m#  the latter of which will raise[39;00m
[32m   1295[39m                         rk = cast(Hashable, rk)
[32m   1296[39m                         [38;5;28;01mif[39;00m rk [38;5;28;01mis[39;00m [38;5;28;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m-> [39m[32m1297[39m                             right_keys.append(right._get_label_or_level_values(rk))
[32m   1298[39m                         [38;5;28;01melse[39;00m:
[32m   1299[39m                             [38;5;66;03m# work-around for merge_asof(right_index=True)[39;00m
[32m   1300[39m                             right_keys.append(right.index._values)

[32m~\miniconda3\Lib\site-packages\pandas\core\generic.py[39m in [36m?[39m[34m(self, key, axis)[39m
[32m   1907[39m             values = self.xs(key, axis=other_axes[[32m0[39m])._values
[32m   1908[39m         [38;5;28;01melif[39;00m self._is_level_reference(key, axis=axis):
[32m   1909[39m             values = self.axes[axis].get_level_values(key)._values
[32m   1910[39m         [38;5;28;01melse[39;00m:
[32m-> [39m[32m1911[39m             [38;5;28;01mraise[39;00m KeyError(key)
[32m   1912[39m 
[32m   1913[39m         [38;5;66;03m# Check for duplicates[39;00m
[32m   1914[39m         [38;5;28;01mif[39;00m values.ndim > [32m1[39m:

[31mKeyError[39m: 'R_fighter'

