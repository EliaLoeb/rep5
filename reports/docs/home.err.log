Traceback (most recent call last):
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\Gebruiker\miniconda3\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Gebruiker\miniconda3\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.express as px

# Laad de opgeschoonde dataset
df = pd.read_csv("ufc_clean.csv")

# Bereken leeftijd winnaar en verliezer
df['winner_age'] = df.apply(lambda row: row['R_age'] if row['Winner'] == 'Red' else row['B_age'], axis=1)
df['loser_age'] = df.apply(lambda row: row['B_age'] if row['Winner'] == 'Red' else row['R_age'], axis=1)

# Filter op realistische leeftijden
df = df[(df['winner_age'].between(18, 50)) & (df['loser_age'].between(18, 50))]

# Maak twee datasets: Ã©Ã©n voor winnaars, Ã©Ã©n voor verliezers
winner_df = df[['weight_class', 'winner_age']].copy()
winner_df['result'] = 'Winnaar'
winner_df['age'] = winner_df['winner_age']

loser_df = df[['weight_class', 'loser_age']].copy()
loser_df['result'] = 'Verliezer'
loser_df['age'] = loser_df['loser_age']

# Combineer in Ã©Ã©n dataframe
combined_df = pd.concat([winner_df, loser_df], ignore_index=True)

# Gewichtsklassen in juiste volgorde van licht naar zwaar (alleen mannelijke klassen)
gewichtsklassen = [
    'Flyweight',
    'Bantamweight',
    'Featherweight',
    'Lightweight',
    'Welterweight',
    'Middleweight',
    'LightHeavyweight',
    'Heavyweight'
]

# Zet als categorische kolom met vaste volgorde
combined_df['result'] = pd.Categorical(combined_df['result'], categories=['Winnaar', 'Verliezer'])
combined_df['weight_class'] = pd.Categorical(combined_df['weight_class'], categories=gewichtsklassen, ordered=True)

# Interactieve boxplot
fig = px.box(combined_df,
             x='weight_class',
             y='age',
             color='result',
             title='Leeftijd van Winnaars vs Verliezers per Gewichtsklasse',
             labels={
                 'weight_class': 'Gewichtsklasse',
                 'age': 'Leeftijd',
                 'result': 'Uitkomst'
             },
             points='outliers',
             category_orders={'weight_class': gewichtsklassen, 'result': ['Winnaar', 'Verliezer']},
             color_discrete_map={'Winnaar': 'royalblue', 'Verliezer': 'indianred'})

# Stijl en layout
fig.update_traces(
    marker=dict(size=6),
    line=dict(width=1.5),
    selector=dict(type='box')
)

for trace in fig.data:
    trace.line.width = 3

fig.update_layout(
    font=dict(size=12),
    boxgap=0.2,
    bargap=0.05,
    boxgroupgap=0.05,
    paper_bgcolor='honeydew',
    plot_bgcolor='honeydew',
    xaxis_tickangle=-45,
    width=1000,
    height=600
)

fig.show()

------------------


[31m---------------------------------------------------------------[39m
[31mFileNotFoundError[39m             Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 5[39m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mexpress[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mpx[39;00m
[32m      4[39m [38;5;66;03m# Laad de opgeschoonde dataset[39;00m
[32m----> [39m[32m5[39m df = [43mpd[49m[43m.[49m[43mread_csv[49m[43m([49m[33;43m"[39;49m[33;43mufc_clean.csv[39;49m[33;43m"[39;49m[43m)[49m
[32m      7[39m [38;5;66;03m# Bereken leeftijd winnaar en verliezer[39;00m
[32m      8[39m df[[33m'[39m[33mwinner_age[39m[33m'[39m] = df.apply([38;5;28;01mlambda[39;00m row: row[[33m'[39m[33mR_age[39m[33m'[39m] [38;5;28;01mif[39;00m row[[33m'[39m[33mWinner[39m[33m'[39m] == [33m'[39m[33mRed[39m[33m'[39m [38;5;28;01melse[39;00m row[[33m'[39m[33mB_age[39m[33m'[39m], axis=[32m1[39m)

[36mFile [39m[32m~\miniconda3\Lib\site-packages\pandas\io\parsers\readers.py:1026[39m, in [36mread_csv[39m[34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[39m
[32m   1013[39m kwds_defaults = _refine_defaults_read(
[32m   1014[39m     dialect,
[32m   1015[39m     delimiter,
[32m   (...)[39m[32m   1022[39m     dtype_backend=dtype_backend,
[32m   1023[39m )
[32m   1024[39m kwds.update(kwds_defaults)
[32m-> [39m[32m1026[39m [38;5;28;01mreturn[39;00m [43m_read[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43mkwds[49m[43m)[49m

[36mFile [39m[32m~\miniconda3\Lib\site-packages\pandas\io\parsers\readers.py:620[39m, in [36m_read[39m[34m(filepath_or_buffer, kwds)[39m
[32m    617[39m _validate_names(kwds.get([33m"[39m[33mnames[39m[33m"[39m, [38;5;28;01mNone[39;00m))
[32m    619[39m [38;5;66;03m# Create the parser.[39;00m
[32m--> [39m[32m620[39m parser = [43mTextFileReader[49m[43m([49m[43mfilepath_or_buffer[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwds[49m[43m)[49m
[32m    622[39m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[32m    623[39m     [38;5;28;01mreturn[39;00m parser

[36mFile [39m[32m~\miniconda3\Lib\site-packages\pandas\io\parsers\readers.py:1620[39m, in [36mTextFileReader.__init__[39m[34m(self, f, engine, **kwds)[39m
[32m   1617[39m     [38;5;28mself[39m.options[[33m"[39m[33mhas_index_names[39m[33m"[39m] = kwds[[33m"[39m[33mhas_index_names[39m[33m"[39m]
[32m   1619[39m [38;5;28mself[39m.handles: IOHandles | [38;5;28;01mNone[39;00m = [38;5;28;01mNone[39;00m
[32m-> [39m[32m1620[39m [38;5;28mself[39m._engine = [38;5;28;43mself[39;49m[43m.[49m[43m_make_engine[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m.[49m[43mengine[49m[43m)[49m

[36mFile [39m[32m~\miniconda3\Lib\site-packages\pandas\io\parsers\readers.py:1880[39m, in [36mTextFileReader._make_engine[39m[34m(self, f, engine)[39m
[32m   1878[39m     [38;5;28;01mif[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[32m   1879[39m         mode += [33m"[39m[33mb[39m[33m"[39m
[32m-> [39m[32m1880[39m [38;5;28mself[39m.handles = [43mget_handle[49m[43m([49m
[32m   1881[39m [43m    [49m[43mf[49m[43m,[49m
[32m   1882[39m [43m    [49m[43mmode[49m[43m,[49m
[32m   1883[39m [43m    [49m[43mencoding[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1884[39m [43m    [49m[43mcompression[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mcompression[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1885[39m [43m    [49m[43mmemory_map[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mmemory_map[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m,[49m
[32m   1886[39m [43m    [49m[43mis_text[49m[43m=[49m[43mis_text[49m[43m,[49m
[32m   1887[39m [43m    [49m[43merrors[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mencoding_errors[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mstrict[39;49m[33;43m"[39;49m[43m)[49m[43m,[49m
[32m   1888[39m [43m    [49m[43mstorage_options[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43moptions[49m[43m.[49m[43mget[49m[43m([49m[33;43m"[39;49m[33;43mstorage_options[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m[43m,[49m
[32m   1889[39m [43m[49m[43m)[49m
[32m   1890[39m [38;5;28;01massert[39;00m [38;5;28mself[39m.handles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m   1891[39m f = [38;5;28mself[39m.handles.handle

[36mFile [39m[32m~\miniconda3\Lib\site-packages\pandas\io\common.py:873[39m, in [36mget_handle[39m[34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[39m
[32m    868[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[32m    869[39m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[32m    870[39m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[32m    871[39m     [38;5;28;01mif[39;00m ioargs.encoding [38;5;129;01mand[39;00m [33m"[39m[33mb[39m[33m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs.mode:
[32m    872[39m         [38;5;66;03m# Encoding[39;00m
[32m--> [39m[32m873[39m         handle = [38;5;28;43mopen[39;49m[43m([49m
[32m    874[39m [43m            [49m[43mhandle[49m[43m,[49m
[32m    875[39m [43m            [49m[43mioargs[49m[43m.[49m[43mmode[49m[43m,[49m
[32m    876[39m [43m            [49m[43mencoding[49m[43m=[49m[43mioargs[49m[43m.[49m[43mencoding[49m[43m,[49m
[32m    877[39m [43m            [49m[43merrors[49m[43m=[49m[43merrors[49m[43m,[49m
[32m    878[39m [43m            [49m[43mnewline[49m[43m=[49m[33;43m"[39;49m[33;43m"[39;49m[43m,[49m
[32m    879[39m [43m        [49m[43m)[49m
[32m    880[39m     [38;5;28;01melse[39;00m:
[32m    881[39m         [38;5;66;03m# Binary mode[39;00m
[32m    882[39m         handle = [38;5;28mopen[39m(handle, ioargs.mode)

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: 'ufc_clean.csv'

